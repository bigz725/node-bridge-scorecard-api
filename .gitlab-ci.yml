#image: node:latest
image: docker:20
variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  REGISTRY: registry.local.zkissane.com
  IMAGE: zachistan/bridge_scorecard_api

  CURRENT_TAG: $REGISTRY/$IMAGE:$CI_COMMIT_REF_SLUG
  CACHE_TAG: $REGISTRY/$IMAGE:cache

  TEST_TAG: ""

  BUILDKIT_INLINE_CACHE: "1"

services:
- name: docker:dind
  command: ["--tls=false"]

stages:
  - build
  - test
  - push
  - release
  - deploy


before_script:
  - docker info
  - docker context create builder-context
  - docker buildx create --name builderx --driver docker-container --use builder-context
#---TEMPLATES-----------
.build_branch_template:
  stage: build
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  variables:
    APP_VERSION_TAG: "$CI_COMMIT_REF_SLUG"
    TEST_TAG: $REGISTRY/$IMAGE:$CI_COMMIT_REF_SLUG-testing

.build_main_template:
  stage: build
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    APP_VERSION_TAG: main
    TEST_TAG: $REGISTRY/$IMAGE:main-testing

.push_branch_template:
  stage: push
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  variables:
    APP_VERSION_TAG: "$CI_COMMIT_REF_SLUG"
    CURRENT_TAG: $REGISTRY/$IMAGE:$CI_COMMIT_REF_SLUG

.push_main_template:
  stage: push
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    APP_VERSION_TAG: main
    CURRENT_TAG: $REGISTRY/$IMAGE:main
    
#end TEMPLATES--------------
  
#----BRANCH JOBS------------
build_amd64_branch:
  tags:
    - amd64
  extends: .build_branch_template
  script:
    - 'echo "Building cache image: $CACHE_TAG for amd64 architecture using branch build"'
    - 'echo "with command: docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-to=type=registry,ref="$CACHE_TAG" --cache-from "$CACHE_TAG" --tag "$CACHE_TAG" --tag "$TEST_TAG:amd64" --push --platform=linux/amd64 . "'
    - docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-to=type=registry,ref="$CACHE_TAG" --cache-from "$CACHE_TAG" --tag "$CACHE_TAG" --tag "$TEST_TAG:amd64" --push --platform=linux/amd64 .
  artifacts:
    reports:
      dotenv: variables.env  

build_arm64_branch:
  tags:
    - arm64
  extends: .build_branch_template
  script:
    - 'echo "Building cache image: $CACHE_TAG for arm64 architecture using branch build"'
    - 'echo "with command: docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-to=type=registry,ref="$CACHE_TAG" --cache-from "$CACHE_TAG" --tag "$CACHE_TAG" --tag "$TEST_TAG:arm64" --push --platform=linux/arm64/v8 . "'
    - docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-to=type=registry,ref="$CACHE_TAG" --cache-from "$CACHE_TAG" --tag "$CACHE_TAG" --tag "$TEST_TAG:arm64" --push --platform=linux/arm64/v8 .
  artifacts:
    reports:
      dotenv: variables.env   

push_branch:
  extends: .push_branch_template
  script:
    - 'echo "Pushing images from $CACHE_TAG to $CURRENT_TAG." for branch build'
    - docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-from "$CACHE_TAG" --tag "$CURRENT_TAG" --push --platform=linux/arm64/v8,linux/amd64 .
#---END BRANCH JOBS
#---MAIN JOBS ----------
build_arm64_main:
  extends: .build_main_template
  tags:
    - arm64
  stage: build
  script:
    - 'echo "Building cache image: $CACHE_TAG for arm64 architecture using main build"'
    - 'echo "with command: docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-to=type=registry,ref="$CACHE_TAG" --cache-from "$CACHE_TAG" --tag "$CACHE_TAG" --tag "$TEST_TAG" --push --platform=linux/arm64/v8 . "'
    - docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-to=type=registry,ref="$CACHE_TAG" --cache-from "$CACHE_TAG" --tag "$CACHE_TAG" --tag "$TEST_TAG" --push --platform=linux/arm64/v8 .

build_amd64_main:
  tags:
    - amd64
  extends: .build_main_template  
  stage: build
  script:
    - 'echo "Building cache image: $CACHE_TAG for amd64 architecture using main build"'
    - 'echo "with command: docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-to=type=registry,ref="$CACHE_TAG" --cache-from "$CACHE_TAG" --tag "$CACHE_TAG" --tag "$TEST_TAG" --push --platform=linux/amd64 . "'
    - docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-to=type=registry,ref="$CACHE_TAG" --cache-from "$CACHE_TAG" --tag "$CACHE_TAG" --tag "$TEST_TAG" --push --platform=linux/amd64 .

push_main:
  extends: .push_main_template
  stage: push
  script:
    - 'echo "Pushing images from $CACHE_TAG to $CURRENT_TAG" for main build'
    - 'echo "with command: docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-from "$CACHE_TAG" --tag "$CURRENT_TAG" --push --platform=linux/arm64/v8,linux/amd64 ."'
    - docker buildx build --build-arg tag="$APP_VERSION_TAG" --cache-from "$CACHE_TAG" --tag "$CURRENT_TAG" --push --platform=linux/arm64/v8,linux/amd64 .

#---END MAIN JOBS    
test_amd64:
  tags:
    - amd64
  stage: test
  script:
    - 'echo "Pulling $TEST_TAG to test using npm test"'
    - docker pull $TEST_TAG
    - docker run $TEST_TAG npm test    

test_arm64:
  tags:
    - arm64
  stage: test
  script:
    - 'echo "Pulling $TEST_TAG to test using npm test"'
    - docker pull $TEST_TAG
    - docker run $TEST_TAG npm test
  
deploy_staging:
  stage: deploy
  environment:
    name: Staging VM
    url: http://bridge-staging.zkissane.com
  script:
    - 'echo "Deploying to staging"'
  when: manual

deploy_pi_kube_cluster:
  stage: deploy
  environment:
    name: Staging cluster
    url: http://bridge.zkissane.com

  before_script:
    - 'which ssh-agent || (apt-get update -y && apt-get install openssh-client -y)'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f ./dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no \n\n" > ~/.ssh/config'

  script:
    - ' echo "Deploying to the Super6c Pi Cluster"'
    - ssh-add <(echo "$DEPLOYER_ID_ECDSA")
    - ssh -o StrictHostKeyChecking=no deployer@"$CLUSTER_MAIN_NODE" 'cd infrastructure/bridge_scorecard_api; ./deploy.sh'
  when: manual  
